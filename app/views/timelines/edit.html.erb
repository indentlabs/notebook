<div x-data="timelineEditor()" class="min-h-screen bg-gray-50">

  <!-- Timeline Header - Clean Paper Style -->
  <div class="bg-white border-b border-gray-200 sticky top-0 z-40 shadow-sm">
    <div class="max-w-7xl mx-auto">
      <!-- Top Bar with Actions -->
      <div class="px-6 py-4 flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <!-- Back Button -->
          <%= link_to timelines_path, class: "inline-flex items-center text-gray-500 hover:text-gray-700 transition-colors" do %>
            <i class="material-icons text-lg mr-2">arrow_back</i>
            <span class="text-sm font-medium">Back to Timelines</span>
          <% end %>
          
          <!-- Auto-save Status -->
          <div class="flex items-center space-x-2 text-sm">
            <div x-show="autoSaveStatus === 'saving'" class="flex items-center text-yellow-600">
              <div class="animate-spin rounded-full h-3 w-3 border-b-2 border-yellow-600 mr-2"></div>
              Saving...
            </div>
            <div x-show="autoSaveStatus === 'saved'" class="flex items-center text-green-600">
              <i class="material-icons text-sm mr-1">check_circle</i>
              Saved
            </div>
            <div x-show="autoSaveStatus === 'error'" class="flex items-center text-red-600">
              <i class="material-icons text-sm mr-1">error</i>
              Error saving
            </div>
          </div>
        </div>
        
        <div class="flex items-center space-x-3">
          <!-- Timeline Stats -->
          <div class="hidden sm:flex items-center space-x-4 text-sm text-gray-600">
            <span><%= @timeline.timeline_events.count %> events</span>
            <span>â€¢</span>
            <span><%= number_with_delimiter(@timeline.cached_word_count) %> words</span>
          </div>
          
          <!-- Action Buttons -->
          <button @click="showMetaPanel = !showMetaPanel" 
                  class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  :class="{ 'bg-gray-100 text-gray-900': showMetaPanel }">
            <i class="material-icons text-lg mr-2">settings</i>
            <span class="hidden sm:inline">Settings</span>
          </button>
          
          <button @click="typeof showShareModal !== 'undefined' ? (showShareModal = true) : console.error('showShareModal not available')" 
                  class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
            <i class="material-icons text-lg mr-2">share</i>
            <span class="hidden sm:inline">Share</span>
          </button>
          
          <%= link_to timeline_path(@timeline), class: "inline-flex items-center px-4 py-2 text-sm font-medium rounded-lg text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 shadow-sm" do %>
            <i class="material-icons text-lg mr-2">visibility</i>
            <span class="hidden sm:inline">View</span>
          <% end %>
        </div>
      </div>
      
      <!-- Timeline Title -->
      <div class="px-6 pb-6">
        <%= form_for @timeline, html: { class: 'timeline-meta-form', '@submit': 'autoSaveStatus = "saving"' }, remote: true do |f| %>
          <div class="group relative">
            <%= f.text_field :name, 
                class: "text-3xl font-bold text-gray-900 bg-transparent border-0 border-b-2 border-transparent hover:border-gray-300 focus:border-green-500 focus:ring-0 w-full transition-all duration-200 placeholder-gray-400 pr-10",
                placeholder: "Timeline title...",
                'x-model': 'timelineData.name',
                '@input.debounce.500ms': 'submitFormRemotely($el.form)',
                '@focus': 'titleFocused = true',
                '@blur': 'titleFocused = false' %>
            
            <!-- Edit Indicator -->
            <div class="absolute right-0 top-1/2 transform -translate-y-1/2 flex items-center space-x-2">
              <i class="material-icons text-lg text-gray-400 group-hover:text-gray-600 transition-colors duration-200" 
                 :class="{ 'text-green-500': titleFocused }">edit</i>
            </div>
            
            <!-- Character Counter -->
            <div class="absolute -bottom-6 right-0 text-xs text-gray-400" x-show="titleFocused">
              <span x-text="timelineData.name.length"></span><span class="text-gray-300">/255</span>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <!-- Settings Panel (Floating Card) -->
  <div x-show="showMetaPanel" 
       x-transition:enter="transition ease-out duration-300"
       x-transition:enter-start="opacity-0 scale-95 -translate-y-4"
       x-transition:enter-end="opacity-100 scale-100 translate-y-0"
       x-transition:leave="transition ease-in duration-200"
       x-transition:leave-start="opacity-100 scale-100 translate-y-0"
       x-transition:leave-end="opacity-0 scale-95 -translate-y-4"
       class="fixed inset-0 z-40 overflow-y-auto bg-black bg-opacity-25 backdrop-blur-sm"
       style="display: none;"
       @click.self="showMetaPanel = false">
    <div class="flex items-start justify-center min-h-screen pt-16 px-4">
      <div class="relative bg-white rounded-xl shadow-2xl max-w-4xl w-full mx-auto border border-gray-100">
        <!-- Close Button -->
        <button @click="showMetaPanel = false" 
                class="absolute top-4 right-4 p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors z-10">
          <i class="material-icons text-lg">close</i>
        </button>
        
        <!-- Panel Header -->
        <div class="px-8 py-6 border-b border-gray-200">
          <div class="flex items-center">
            <div class="flex-shrink-0 flex items-center justify-center h-10 w-10 rounded-full bg-green-100">
              <i class="material-icons text-green-600 text-lg">settings</i>
            </div>
            <div class="ml-4">
              <h3 class="text-lg font-semibold text-gray-900">Timeline Settings</h3>
              <p class="text-sm text-gray-500">Configure your timeline details and metadata</p>
            </div>
          </div>
        </div>
        
        <!-- Panel Content -->
        <div class="px-8 py-6">
      <%= form_for @timeline, html: { class: 'timeline-meta-form' }, remote: true do |f| %>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Left Column -->
          <div class="space-y-6">
            <!-- Universe Selector -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Universe</label>
              <%= f.select :universe_id, 
                  options_from_collection_for_select(current_user.universes, :id, :name, @timeline.universe_id),
                  { include_blank: "No universe" },
                  { class: "w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500",
                    '@change': 'submitFormRemotely($el.form)' } %>
              <p class="mt-1 text-sm text-gray-500">Organize this timeline within a universe</p>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Subtitle</label>
              <%= f.text_area :subtitle, 
                  rows: 2,
                  class: "w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 resize-none",
                  placeholder: "Brief description of this timeline...",
                  'x-model': 'timelineData.subtitle',
                  '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
              <%= f.text_area :description, 
                  rows: 4,
                  class: "w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500",
                  placeholder: "Detailed description of this timeline...",
                  'x-model': 'timelineData.description',
                  '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
            </div>
          </div>
          
          <!-- Right Column -->
          <div class="space-y-6">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Notes</label>
              <%= f.text_area :notes, 
                  rows: 3,
                  class: "w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500",
                  placeholder: "Public notes about this timeline...",
                  'x-model': 'timelineData.notes',
                  '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Private Notes</label>
              <%= f.text_area :private_notes, 
                  rows: 3,
                  class: "w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500",
                  placeholder: "Private notes (only visible to you)...",
                  'x-model': 'timelineData.private_notes',
                  '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
            </div>
            
            <!-- Tags Section -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Tags</label>
              <div class="space-y-2">
                <div class="flex flex-wrap gap-2">
                  <% @timeline.page_tags.each do |tag| %>
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800">
                      <%= tag.tag %>
                      <button type="button" class="ml-2 hover:text-green-600">
                        <i class="material-icons text-sm">close</i>
                      </button>
                    </span>
                  <% end %>
                </div>
                <input type="text" 
                       placeholder="Add tags..." 
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm"
                       @keydown.enter.prevent="addTag($event.target.value); $event.target.value = ''">
              </div>
            </div>
          </div>
        </div>
        
        <!-- Danger Zone -->
        <div class="mt-8 pt-8 border-t border-gray-200">
          <div class="flex justify-between items-center">
            <div>
              <h3 class="text-lg font-medium text-gray-900">Danger Zone</h3>
              <p class="text-sm text-gray-600">These actions cannot be undone.</p>
            </div>
            <%= link_to timeline_path(@timeline), 
                method: :delete,
                data: { confirm: "Are you sure you want to delete this timeline? This cannot be undone!" },
                class: "inline-flex items-center px-4 py-2 border border-red-300 text-sm font-medium rounded-lg text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" do %>
              <i class="material-icons text-lg mr-2">delete</i>
              Delete Timeline
            <% end %>
          </div>
        </div>
      <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Timeline Editor -->
  <div class="max-w-7xl mx-auto px-6 py-8">
    <!-- Search and Controls -->
    <div class="mb-8 flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <i class="material-icons text-gray-400 text-lg">search</i>
          </div>
          <input x-model="searchQuery"
                 type="text" 
                 placeholder="Search events..." 
                 class="block w-64 pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 sm:text-sm">
        </div>
        
        <button @click="showFilters = !showFilters"
                class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                :class="{ 'bg-gray-100 text-gray-900': showFilters }">
          <i class="material-icons text-lg mr-2">filter_list</i>
          <span class="hidden sm:inline">Filters</span>
        </button>
        
        <span class="text-sm text-gray-500">
          <%= pluralize(@timeline.timeline_events.count, 'event') %>
        </span>
      </div>
      
      <button id="js-create-timeline-event"
              class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-lg text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 shadow-sm">
        <i class="material-icons text-lg mr-2">add</i>
        Add Event
      </button>
    </div>

    <!-- Filters Panel -->
    <div x-show="showFilters" 
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0 -translate-y-2"
         x-transition:enter-end="opacity-100 translate-y-0"
         x-transition:leave="transition ease-in duration-150"
         x-transition:leave-start="opacity-100 translate-y-0"
         x-transition:leave-end="opacity-0 -translate-y-2"
         class="mb-8 bg-white rounded-lg border border-gray-200 p-6 shadow-sm"
         style="display: none;">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Event Type Filters -->
        <div class="filter-group">
          <h3 class="text-sm font-medium text-gray-900 mb-3">Event Types</h3>
          <div class="space-y-2">
            <% TimelineEvent::EVENT_TYPES.each do |type_key, type_info| %>
              <label class="filter-checkbox">
                <input type="checkbox" 
                       x-model="eventTypeFilters" 
                       value="<%= type_key %>"
                       class="rounded border-gray-300 text-green-600 focus:ring-green-500">
                <div class="filter-color-dot bg-<%= type_info[:color] %>-500"></div>
                <span class="text-sm text-gray-700"><%= type_info[:name] %></span>
              </label>
            <% end %>
          </div>
        </div>
        
        <!-- Importance Filters -->
        <div class="filter-group">
          <h3 class="text-sm font-medium text-gray-900 mb-3">Importance Level</h3>
          <div class="space-y-2">
            <% TimelineEvent::IMPORTANCE_LEVELS.each do |level_key, level_info| %>
              <label class="filter-checkbox">
                <input type="checkbox" 
                       x-model="importanceFilters" 
                       value="<%= level_key %>"
                       class="rounded border-gray-300 text-green-600 focus:ring-green-500">
                <span class="text-sm text-gray-700"><%= level_info[:name] %></span>
              </label>
            <% end %>
          </div>
        </div>
        
        <!-- Status Filters -->
        <div class="filter-group">
          <h3 class="text-sm font-medium text-gray-900 mb-3">Status</h3>
          <div class="space-y-2">
            <% TimelineEvent::STATUS_OPTIONS.each do |status_key, status_info| %>
              <label class="filter-checkbox">
                <input type="checkbox" 
                       x-model="statusFilters" 
                       value="<%= status_key %>"
                       class="rounded border-gray-300 text-green-600 focus:ring-green-500">
                <span class="text-sm text-gray-700"><%= status_info[:name] %></span>
              </label>
            <% end %>
          </div>
        </div>
      </div>
      
      <!-- Filter Actions -->
      <div class="mt-6 flex justify-between items-center pt-4 border-t border-gray-200">
        <button @click="clearAllFilters()" 
                class="text-sm text-gray-600 hover:text-gray-900">
          Clear All Filters
        </button>
        <span class="text-sm text-gray-500" x-text="getFilteredEventCount() + ' events match filters'"></span>
      </div>
    </div>

    <!-- Timeline Events -->
    <!-- DEBUG: Start of timeline-events-container -->
    <div class="timeline-events-container" data-timeline-id="<%= @timeline.id %>">
      <!-- DEBUG: Total events in database: <%= @timeline.timeline_events.count %> -->
      <% @timeline.timeline_events.includes(:timeline_event_entities).each_with_index do |event, index| %>
        <div class="timeline-event-container group" 
             data-event-id="<%= event.id %>" 
             data-timeline-id="<%= @timeline.id %>"
             data-event-type="<%= event.event_type %>"
             data-importance="<%= event.importance_level %>"
             data-status="<%= event.status %>">
          <!-- Event Content -->
          <div class="flex items-start space-x-6">
            <!-- Premium Timeline Dot and Controls -->
            <div class="flex flex-col items-center space-y-4 flex-shrink-0 z-10">
              <!-- Clean Timeline Dot -->
              <div class="relative">
                <div class="w-4 h-4 rounded-full timeline-dot-<%= event.event_type_info[:color] %>"></div>
              </div>
              
              <!-- Timeline Move Controls -->
              <div class="timeline-move-controls opacity-0 group-hover:opacity-100 transition-opacity">
                <div class="flex flex-col space-y-1">
                  <%= link_to '#', class: 'js-move-event-to-top' do %>
                    <i class="material-icons text-sm">keyboard_double_arrow_up</i>
                  <% end %>
                  <%= link_to '#', class: 'js-move-event-up' do %>
                    <i class="material-icons text-sm">keyboard_arrow_up</i>
                  <% end %>
                  <%= link_to '#', class: 'js-move-event-down' do %>
                    <i class="material-icons text-sm">keyboard_arrow_down</i>
                  <% end %>
                  <%= link_to '#', class: 'js-move-event-to-bottom' do %>
                    <i class="material-icons text-sm">keyboard_double_arrow_down</i>
                  <% end %>
                </div>
              </div>
            </div>
            
            <!-- Event Card -->
            <div class="flex-1">
              <%= form_for event, html: { class: 'autosave-form' }, remote: true do |f| %>
                <%= f.hidden_field :timeline_id %>
                
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md hover:border-gray-300 transition-all duration-200">
                  
                  <!-- Event Card Header -->
                  <div class="px-4 py-3 border-b border-gray-100 bg-gray-50">
                    <div class="flex items-center justify-between">
                      <!-- Event Title -->
                      <div class="flex-1">
                        <%= f.text_field :title, 
                            class: "event-title w-full text-lg font-semibold text-gray-900 bg-transparent border-0 hover:bg-white hover:border hover:border-gray-200 focus:bg-white focus:border-green-500 focus:ring-0 transition-colors px-2 py-1 rounded",
                            placeholder: "Event title...",
                            '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
                      </div>
                      
                      <!-- Event Actions -->
                      <div class="flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity ml-4">
                        <button type="button" 
                                @click="typeof openLinkModal !== 'undefined' ? openLinkModal(<%= event.id %>) : console.error('openLinkModal not available')"
                                class="p-1.5 text-gray-400 hover:text-gray-600 rounded hover:bg-gray-50">
                          <i class="material-icons text-sm">link</i>
                        </button>
                        <button type="button" 
                                onclick="deleteEvent(<%= event.id %>, this)"
                                class="p-1.5 text-gray-400 hover:text-red-600 rounded hover:bg-red-50">
                          <i class="material-icons text-sm">delete</i>
                        </button>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Event Body -->
                  <div class="px-4 py-3">
                    
                    <!-- Clean Time Header -->
                    <div class="flex items-center space-x-4 mb-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
                      <div class="flex items-center justify-center w-10 h-10 bg-green-500 rounded-lg shadow-sm">
                        <i class="material-icons text-white text-lg">schedule</i>
                      </div>
                      <div class="flex items-center space-x-3 flex-1">
                        <!-- Start Time -->
                        <div class="flex-1">
                          <label class="block text-xs font-medium text-gray-700 mb-1">Start Time</label>
                          <%= f.text_field :time_label, 
                              class: "timeline-input w-full text-sm font-medium text-gray-800",
                              placeholder: "Start time",
                              '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
                        </div>
                        
                        <!-- Arrow Separator -->
                        <div class="flex items-center justify-center w-8 h-8 bg-white rounded-full border border-gray-200 mt-6">
                          <i class="material-icons text-sm text-green-500">arrow_forward</i>
                        </div>
                        
                        <!-- End Time -->
                        <div class="flex-1">
                          <label class="block text-xs font-medium text-gray-700 mb-1">End Time</label>
                          <%= f.text_field :end_time_label, 
                              class: "timeline-input w-full text-sm font-medium text-gray-800",
                              placeholder: "End time (optional)",
                              '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Clean Event Type and Status Badges -->
                    <div class="flex items-center space-x-3 mb-3">
                      <div class="flex items-center space-x-2">
                        <!-- Event Type Badge -->
                        <span class="event-type-badge inline-flex items-center">
                          <i class="material-icons text-xs mr-1"><%= event.event_type_info[:icon] %></i>
                          <%= event.event_type_info[:name] %>
                        </span>
                        
                        <% if event.importance_level == 'major' %>
                          <!-- Major Importance Badge -->
                          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-amber-100 text-amber-800 border border-amber-200">
                            <i class="material-icons text-xs mr-1">star</i>
                            Major
                          </span>
                        <% end %>
                      </div>
                    </div>
                    
                    
                    <!-- Clean Description -->
                    <div class="mb-4">
                      <%= f.text_area :description, 
                          rows: 2,
                          class: "timeline-input w-full text-sm text-gray-700 resize-none",
                          placeholder: "What happened?",
                          '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
                    </div>
                    
                    <!-- Expandable Icons Bar -->
                    <div class="flex items-center justify-between mt-3 pt-3 border-t border-gray-100">
                      <span class="status-badge-<%= event.status %> inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium">
                        <%= event.status_info[:name] %>
                      </span>
                      
                      <div class="flex items-center space-x-2">
                        <!-- Settings Icon -->
                        <button type="button" 
                                @click="typeof toggleEventSection !== 'undefined' ? toggleEventSection(<%= event.id %>, 'settings') : console.error('toggleEventSection not available')"
                                class="expandable-icon"
                                :class="{ 'active': typeof isEventSectionOpen !== 'undefined' ? isEventSectionOpen(<%= event.id %>, 'settings') : false }"
                                title="Event Settings">
                          <i class="material-icons text-sm">settings</i>
                        </button>
                        
                        <!-- Notes Icon -->
                        <button type="button" 
                                @click="typeof toggleEventSection !== 'undefined' ? toggleEventSection(<%= event.id %>, 'notes') : console.error('toggleEventSection not available')"
                                class="expandable-icon"
                                :class="{ 'active': typeof isEventSectionOpen !== 'undefined' ? isEventSectionOpen(<%= event.id %>, 'notes') : false }"
                                title="Notes">
                          <i class="material-icons text-sm">note</i>
                        </button>
                        
                        <!-- Status Icon -->
                        <button type="button" 
                                @click="typeof toggleEventSection !== 'undefined' ? toggleEventSection(<%= event.id %>, 'status') : console.error('toggleEventSection not available')"
                                class="expandable-icon"
                                :class="{ 'active': typeof isEventSectionOpen !== 'undefined' ? isEventSectionOpen(<%= event.id %>, 'status') : false }"
                                title="Status">
                          <i class="material-icons text-sm">check_circle</i>
                        </button>
                      </div>
                    </div>
                    
                    <!-- Expandable Sections -->
                    <div class="space-y-3">
                      <!-- Settings Section -->
                      <div x-show="typeof isEventSectionOpen !== 'undefined' ? isEventSectionOpen(<%= event.id %>, 'settings') : false" 
                           x-transition:enter="transition ease-out duration-200"
                           x-transition:enter-start="opacity-0 -translate-y-2"
                           x-transition:enter-end="opacity-100 translate-y-0"
                           x-transition:leave="transition ease-in duration-150"
                           x-transition:leave-start="opacity-100 translate-y-0"
                           x-transition:leave-end="opacity-0 -translate-y-2"
                           class="expandable-section settings-section bg-gray-50 rounded-lg p-3 space-y-3">
                        <h4 class="text-sm font-medium text-gray-900 flex items-center">
                          <i class="material-icons text-sm mr-2 text-green-600">settings</i>
                          Event Settings
                        </h4>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                          <!-- Event Type -->
                          <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Event Type</label>
                            <%= f.select :event_type, 
                                options_for_select(TimelineEvent::EVENT_TYPES.map { |k, v| [v[:name], k] }, event.event_type),
                                {},
                                { class: "w-full text-xs px-2 py-1 border border-gray-300 rounded focus:ring-1 focus:ring-green-500 focus:border-green-500",
                                  '@change': 'submitFormRemotely($el.form)' } %>
                          </div>
                          
                          <!-- Importance Level -->
                          <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Importance</label>
                            <%= f.select :importance_level,
                                options_for_select(TimelineEvent::IMPORTANCE_LEVELS.map { |k, v| [v[:name], k] }, event.importance_level),
                                {},
                                { class: "w-full text-xs px-2 py-1 border border-gray-300 rounded focus:ring-1 focus:ring-green-500 focus:border-green-500",
                                  '@change': 'submitFormRemotely($el.form)' } %>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Notes Section -->
                      <div x-show="typeof isEventSectionOpen !== 'undefined' ? isEventSectionOpen(<%= event.id %>, 'notes') : false" 
                           x-transition:enter="transition ease-out duration-200"
                           x-transition:enter-start="opacity-0 -translate-y-2"
                           x-transition:enter-end="opacity-100 translate-y-0"
                           x-transition:leave="transition ease-in duration-150"
                           x-transition:leave-start="opacity-100 translate-y-0"
                           x-transition:leave-end="opacity-0 -translate-y-2"
                           class="expandable-section notes-section bg-blue-50 rounded-lg p-3 space-y-3">
                        <h4 class="text-sm font-medium text-gray-900 flex items-center">
                          <i class="material-icons text-sm mr-2 text-blue-600">note</i>
                          Notes
                        </h4>
                        <div class="space-y-3">
                          <!-- Public Notes -->
                          <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1">Public Notes</label>
                            <%= f.text_area :notes, 
                                rows: 2,
                                class: "w-full text-xs px-2 py-1 text-gray-600 bg-white border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500 resize-none placeholder-gray-400",
                                placeholder: "Additional notes...",
                                '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
                          </div>
                          
                          <!-- Private Notes -->
                          <div>
                            <label class="block text-xs font-medium text-gray-700 mb-1 flex items-center">
                              <i class="material-icons text-xs mr-1 text-amber-600">lock</i>
                              Private Notes
                            </label>
                            <%= f.text_area :private_notes, 
                                rows: 2,
                                class: "w-full text-xs px-2 py-1 text-gray-600 bg-amber-50 border border-amber-200 rounded focus:ring-1 focus:ring-amber-500 focus:border-amber-500 resize-none placeholder-amber-400",
                                placeholder: "Private notes...",
                                '@input.debounce.500ms': 'submitFormRemotely($el.form)' %>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Status Section -->
                      <div x-show="typeof isEventSectionOpen !== 'undefined' ? isEventSectionOpen(<%= event.id %>, 'status') : false" 
                           x-transition:enter="transition ease-out duration-200"
                           x-transition:enter-start="opacity-0 -translate-y-2"
                           x-transition:enter-end="opacity-100 translate-y-0"
                           x-transition:leave="transition ease-in duration-150"
                           x-transition:leave-start="opacity-100 translate-y-0"
                           x-transition:leave-end="opacity-0 -translate-y-2"
                           class="expandable-section status-section bg-purple-50 rounded-lg p-3">
                        <h4 class="text-sm font-medium text-gray-900 flex items-center mb-2">
                          <i class="material-icons text-sm mr-2 text-purple-600">check_circle</i>
                          Status
                        </h4>
                        <%= f.select :status,
                            options_for_select(TimelineEvent::STATUS_OPTIONS.map { |k, v| [v[:name], k] }, event.status),
                            {},
                            { class: "w-full text-sm px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 bg-white",
                              '@change': 'submitFormRemotely($el.form)' } %>
                      </div>
                    </div>
                  </div>
                    
                    <!-- Linked Content -->
                    <%= render 'shared/timeline_event_linked_content', timeline_event: event %>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      <% end %>
    </div>
    <!-- DEBUG: End of timeline-events-container -->
    
    <!-- Empty State -->
    <% if @timeline.timeline_events.empty? %>
      <div class="text-center py-12">
        <div class="mx-auto h-24 w-24 rounded-full bg-gradient-to-br from-green-100 to-green-200 flex items-center justify-center mb-6 shadow-sm">
          <i class="material-icons text-4xl text-green-600">timeline</i>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-3">Your timeline is empty</h3>
        <p class="text-gray-600 mb-8 max-w-md mx-auto">
          Start building your timeline by adding your first event. Track important moments, plot points, and key developments in chronological order.
        </p>
        <button id="js-create-first-event"
                class="inline-flex items-center px-6 py-3 text-base font-medium rounded-lg text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 shadow-sm">
          <i class="material-icons text-lg mr-2">add</i>
          Add Your First Event
        </button>
      </div>
    <% end %>
  </div>

  <!-- Link Content Modal -->
  <div x-show="typeof showLinkModal !== 'undefined' ? showLinkModal : false" 
       x-transition:enter="transition ease-out duration-200"
       x-transition:enter-start="opacity-0"
       x-transition:enter-end="opacity-100"
       x-transition:leave="transition ease-in duration-150"
       x-transition:leave-start="opacity-100"
       x-transition:leave-end="opacity-0"
       class="fixed inset-0 z-50 overflow-y-auto"
       style="display: none;">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <!-- Backdrop -->
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @click="typeof closeLinkModal !== 'undefined' ? closeLinkModal() : console.error('closeLinkModal not available')"></div>
      
      <!-- Modal -->
      <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-5xl sm:w-full sm:p-6">
        <!-- Modal Header -->
        <div class="flex items-center mb-6">
          <div class="flex-shrink-0 flex items-center justify-center h-10 w-10 rounded-full bg-green-100">
            <i class="material-icons text-green-600">link</i>
          </div>
          <h3 class="ml-4 text-xl font-semibold text-gray-900">Link Content to Event</h3>
        </div>
        
        <!-- Two-Column Layout -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6" style="height: 32rem;">
          <!-- Left Sidebar - Filters (Hidden on mobile) -->
          <div class="hidden md:block col-span-1 bg-gray-50 rounded-lg p-4 overflow-y-auto">
            <div class="space-y-3">
              <!-- All Pages Filter -->
              <button type="button"
                      @click="typeof selectedFilter !== 'undefined' ? (selectedFilter = selectedFilter === 'all' ? '' : 'all') : console.error('selectedFilter not available')"
                      :class="{ 'bg-green-100 text-green-800 border-green-300': typeof selectedFilter !== 'undefined' ? (selectedFilter === 'all' || !selectedFilter) : true }"
                      class="w-full text-left px-3 py-2 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors flex items-center">
                <i class="material-icons text-sm mr-2 text-gray-600">view_list</i>
                <span class="text-sm font-medium">All Pages</span>
              </button>
              
              <!-- Timeline Content Filter (if exists) -->
              <% if @timeline_linked_content&.any? { |_, content| content.any? } %>
                <button type="button"
                        @click="typeof selectedFilter !== 'undefined' ? (selectedFilter = selectedFilter === 'timeline' ? '' : 'timeline') : console.error('selectedFilter not available')"
                        :class="{ 'bg-blue-100 text-blue-800 border-blue-300': typeof selectedFilter !== 'undefined' ? selectedFilter === 'timeline' : false }"
                        class="w-full text-left px-3 py-2 rounded-lg border border-blue-300 text-blue-700 hover:bg-blue-50 transition-colors flex items-center">
                  <i class="material-icons text-sm mr-2">timeline</i>
                  <span class="text-sm font-medium">Timeline Content</span>
                </button>
              <% end %>
              
              <!-- Divider -->
              <div class="border-t border-gray-300 my-3"></div>
              <div class="text-xs font-medium text-gray-600 uppercase tracking-wide mb-2">By Type</div>
              
              <!-- Content Type Filters -->
              <div class="space-y-1">
                <% @current_user_content.keys.sort.each do |content_type| %>
                  <% next if @current_user_content[content_type].empty? %>
                  <% content_type_class = content_class_from_name(content_type) %>
                  <button type="button"
                          @click="typeof selectedFilter !== 'undefined' ? (selectedFilter = selectedFilter === '<%= content_type.downcase %>' ? '' : '<%= content_type.downcase %>') : console.error('selectedFilter not available')"
                          :class="{ 'bg-green-100 text-green-800 border-green-300': typeof selectedFilter !== 'undefined' ? selectedFilter === '<%= content_type.downcase %>' : false }"
                          class="w-full text-left px-3 py-2 rounded-lg border border-gray-200 text-gray-700 hover:bg-gray-50 transition-colors flex items-center justify-between group">
                    <div class="flex items-center min-w-0">
                      <i class="material-icons text-sm mr-2 <%= content_type_class.text_color %> flex-shrink-0"><%= content_type_class.icon %></i>
                      <span class="text-sm truncate"><%= content_type.pluralize %></span>
                    </div>
                    <span class="text-xs text-gray-500 flex-shrink-0">(<%= @current_user_content[content_type].count %>)</span>
                  </button>
                <% end %>
              </div>
            </div>
          </div>
          
          <!-- Right Content Area -->
          <div class="col-span-1 md:col-span-3 flex flex-col min-h-0">
            <!-- Mobile Filter Toggle (Visible on mobile only) -->
            <div class="md:hidden mb-4">
              <button type="button"
                      @click="typeof showMobileFilters !== 'undefined' ? (showMobileFilters = !showMobileFilters) : console.error('showMobileFilters not available')"
                      class="w-full flex items-center justify-between px-4 py-2 bg-gray-50 rounded-lg border border-gray-300 text-gray-700">
                <span class="flex items-center">
                  <i class="material-icons text-sm mr-2">filter_list</i>
                  <span class="text-sm font-medium">Filters</span>
                </span>
                <i class="material-icons text-sm" :class="typeof showMobileFilters !== 'undefined' ? (showMobileFilters ? 'rotate-180' : '') : ''">expand_more</i>
              </button>
              
              <!-- Mobile Filter Panel -->
              <div x-show="typeof showMobileFilters !== 'undefined' ? showMobileFilters : false" 
                   x-transition:enter="transition ease-out duration-200"
                   x-transition:enter-start="opacity-0 -translate-y-2"
                   x-transition:enter-end="opacity-100 translate-y-0"
                   class="mt-2 p-4 bg-gray-50 rounded-lg border border-gray-200">
                <div class="grid grid-cols-2 gap-2">
                  <button type="button"
                          @click="typeof selectedFilter !== 'undefined' && typeof showMobileFilters !== 'undefined' ? (selectedFilter = '', showMobileFilters = false) : console.error('variables not available')"
                          :class="{ 'bg-green-100 text-green-800 border-green-300': typeof selectedFilter !== 'undefined' ? !selectedFilter : true }"
                          class="px-3 py-2 rounded border border-gray-300 text-gray-700 text-sm">
                    All Pages
                  </button>
                  <% if @timeline_linked_content&.any? { |_, content| content.any? } %>
                    <button type="button"
                            @click="typeof selectedFilter !== 'undefined' && typeof showMobileFilters !== 'undefined' ? (selectedFilter = 'timeline', showMobileFilters = false) : console.error('variables not available')"
                            :class="{ 'bg-blue-100 text-blue-800 border-blue-300': typeof selectedFilter !== 'undefined' ? selectedFilter === 'timeline' : false }"
                            class="px-3 py-2 rounded border border-blue-300 text-blue-700 text-sm">
                      Timeline
                    </button>
                  <% end %>
                  <% @current_user_content.keys.sort.first(6).each do |content_type| %>
                    <% next if @current_user_content[content_type].empty? %>
                    <button type="button"
                            @click="typeof selectedFilter !== 'undefined' && typeof showMobileFilters !== 'undefined' ? (selectedFilter = '<%= content_type.downcase %>', showMobileFilters = false) : console.error('variables not available')"
                            :class="{ 'bg-green-100 text-green-800 border-green-300': typeof selectedFilter !== 'undefined' ? selectedFilter === '<%= content_type.downcase %>' : false }"
                            class="px-2 py-2 rounded border border-gray-300 text-gray-700 text-xs truncate">
                      <%= content_type.pluralize %>
                    </button>
                  <% end %>
                </div>
              </div>
            </div>
            
            <!-- Search Bar -->
            <div class="relative mb-4">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="material-icons text-gray-400 text-lg">search</i>
              </div>
              <input type="text" 
                     :value="typeof linkModalSearchQuery !== 'undefined' ? linkModalSearchQuery : ''"
                     @input="typeof linkModalSearchQuery !== 'undefined' ? (linkModalSearchQuery = $event.target.value) : null"
                     placeholder="Search your content..." 
                     class="link-modal-search block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 sm:text-sm"
                     @keydown.escape="typeof closeLinkModal !== 'undefined' ? closeLinkModal() : console.error('closeLinkModal not available')"
                     @keydown.enter.prevent="typeof linkFirstResult !== 'undefined' ? linkFirstResult() : console.error('linkFirstResult not available')">
            </div>
            
            <!-- Content Lists -->
            <div class="flex-1 overflow-y-auto space-y-4 min-h-0 pr-2">
              <!-- Timeline Linked Content Section -->
              <% if @timeline_linked_content&.any? { |_, content| content.any? } %>
                <div x-show="typeof selectedFilter !== 'undefined' ? selectedFilter === 'timeline' : false" class="bg-blue-50 rounded-lg p-4 border border-blue-200">
                  <button type="button"
                          @click="typeof toggleSection !== 'undefined' ? toggleSection('timeline-overview') : console.error('toggleSection not available')"
                          class="w-full text-left mb-3 flex items-center justify-between hover:bg-blue-100 rounded-lg p-2 -m-2 transition-colors">
                    <div class="flex items-center">
                      <i class="material-icons text-sm mr-2 text-blue-600">timeline</i>
                      <h4 class="text-sm font-semibold text-blue-900">Already Used in This Timeline</h4>
                    </div>
                    <i class="material-icons text-sm text-blue-600 transition-transform duration-200" 
                       :class="typeof isSectionCollapsed !== 'undefined' ? (isSectionCollapsed('timeline-overview') ? '' : 'rotate-90') : ''">chevron_right</i>
                  </button>
                  
                  <div x-show="typeof isSectionCollapsed !== 'undefined' ? !isSectionCollapsed('timeline-overview') : true"
                       x-transition:enter="transition ease-out duration-200"
                       x-transition:enter-start="opacity-0 -translate-y-2"
                       x-transition:enter-end="opacity-100 translate-y-0"
                       x-transition:leave="transition ease-in duration-150"
                       x-transition:leave-start="opacity-100 translate-y-0"
                       x-transition:leave-end="opacity-0 -translate-y-2">
                    <p class="text-xs text-blue-700 mb-3">Content linked to other events in this timeline:</p>
                    
                    <div class="space-y-4">
                      <% @timeline_linked_content.each do |content_type, content_list| %>
                        <% next if content_list.empty? %>
                        <% content_type_class = content_class_from_name(content_type) %>
                        
                        <div>
                          <button type="button"
                                  @click="typeof toggleSection !== 'undefined' ? toggleSection('timeline-<%= content_type.downcase %>') : console.error('toggleSection not available')"
                                  class="w-full text-left mb-3 flex items-center justify-between hover:bg-blue-100 rounded-lg p-2 -m-2 transition-colors">
                            <div class="flex items-center">
                              <i class="material-icons text-sm mr-2 <%= content_type_class.text_color %>"><%= content_type_class.icon %></i>
                              <h5 class="text-sm font-semibold text-blue-900"><%= content_type.pluralize %></h5>
                              <span class="ml-2 text-xs text-blue-700 font-normal">(<%= content_list.count %>)</span>
                            </div>
                            <i class="material-icons text-xs text-blue-600 transition-transform duration-200" 
                               :class="typeof isSectionCollapsed !== 'undefined' ? (isSectionCollapsed('timeline-<%= content_type.downcase %>') ? '' : 'rotate-90') : ''">chevron_right</i>
                          </button>
                          
                          <div x-show="typeof isSectionCollapsed !== 'undefined' ? !isSectionCollapsed('timeline-<%= content_type.downcase %>') : true"
                               x-transition:enter="transition ease-out duration-200"
                               x-transition:enter-start="opacity-0 -translate-y-2"
                               x-transition:enter-end="opacity-100 translate-y-0"
                               class="space-y-2">
                            <% content_list.each do |content| %>
                              <% content_name = content.name.presence || "Untitled #{content_type}" %>
                              <button type="button"
                                      class="js-link-entity-selection w-full text-left px-3 py-2 rounded-lg bg-blue-50 hover:bg-blue-100 transition-colors border border-blue-200 flex items-center justify-between group"
                                      data-id="<%= content.id %>"
                                      data-type="<%= content_type %>"
                                      data-name="<%= j(content_name) %>"
                                      x-show="typeof linkableContentMatches !== 'undefined' ? linkableContentMatches('<%= j(content_name) %>', '<%= j(content_type) %>') : true">
                                <div class="flex items-center">
                                  <i class="material-icons text-sm mr-2 <%= content_type_class.text_color %>"><%= content_type_class.icon %></i>
                                  <span class="text-sm font-medium text-blue-900"><%= content_name %></span>
                                </div>
                                <i class="material-icons text-sm text-blue-400 group-hover:text-blue-600 transition-colors">add_circle</i>
                              </button>
                            <% end %>
                          </div>
                        </div>
                      <% end %>
                    </div>
                  </div>
                </div>
              <% end %>
              
              <!-- Regular Content Lists -->
              <% @current_user_content.each do |content_type, content_list| %>
                <% next if content_list.empty? %>
                <% content_type_class = content_class_from_name(content_type) %>
                
                <div x-show="typeof linkableContentMatches !== 'undefined' ? linkableContentMatches('<%= j(content_type) %>', '<%= j(content_type) %>') : true">
                  <button type="button"
                          @click="typeof toggleSection !== 'undefined' ? toggleSection('<%= content_type.downcase %>') : console.error('toggleSection not available')"
                          class="w-full text-left mb-3 flex items-center justify-between hover:bg-gray-50 rounded-lg p-2 -m-2 transition-colors">
                    <div class="flex items-center">
                      <i class="material-icons text-sm mr-2 <%= content_type_class.text_color %>"><%= content_type_class.icon %></i>
                      <h4 class="text-sm font-semibold text-gray-900"><%= content_type.pluralize %></h4>
                      <span class="ml-2 text-xs text-gray-500 font-normal">(<%= content_list.count %>)</span>
                    </div>
                    <i class="material-icons text-sm text-gray-400 transition-transform duration-200" 
                       :class="typeof isSectionCollapsed !== 'undefined' ? (isSectionCollapsed('<%= content_type.downcase %>') ? '' : 'rotate-90') : ''">chevron_right</i>
                  </button>
                  
                  <div x-show="typeof isSectionCollapsed !== 'undefined' ? !isSectionCollapsed('<%= content_type.downcase %>') : true"
                       x-transition:enter="transition ease-out duration-200"
                       x-transition:enter-start="opacity-0 -translate-y-2"
                       x-transition:enter-end="opacity-100 translate-y-0"
                       x-transition:leave="transition ease-in duration-150"
                       x-transition:leave-start="opacity-100 translate-y-0"
                       x-transition:leave-end="opacity-0 -translate-y-2"
                       class="space-y-2">
                    <% content_list.first(20).each do |content| %>
                      <% content_name = content.name.presence || "Untitled #{content_type}" %>
                      <button type="button"
                              class="js-link-entity-selection w-full text-left px-3 py-2 rounded-lg hover:bg-gray-50 border border-gray-200 hover:border-gray-300 transition-colors flex items-center justify-between group"
                              data-id="<%= content.id %>"
                              data-type="<%= content_type %>"
                              data-name="<%= j(content_name) %>"
                              x-show="typeof linkableContentMatches !== 'undefined' ? linkableContentMatches('<%= j(content_name) %>', '<%= j(content_type) %>') : true">
                        <div class="flex items-center min-w-0">
                          <i class="material-icons text-sm mr-2 <%= content_type_class.text_color %> flex-shrink-0"><%= content_type_class.icon %></i>
                          <span class="text-sm text-gray-700 group-hover:text-gray-900 truncate">
                            <%= content_name %>
                          </span>
                        </div>
                        <i class="material-icons text-sm text-gray-400 group-hover:text-green-600 transition-colors flex-shrink-0">add_circle_outline</i>
                      </button>
                    <% end %>
                    <% if content_list.count > 20 %>
                      <div class="text-xs text-gray-500 px-3 py-2 bg-gray-50 rounded-lg border border-gray-200">
                        <i class="material-icons text-xs mr-1">info</i>
                        Showing first 20 of <%= content_list.count %> <%= content_type.pluralize.downcase %>. Use search to find more.
                      </div>
                    <% end %>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        </div>
        
        <!-- Modal Footer -->
        <div class="mt-6 flex justify-end">
          <button type="button" 
                  @click="typeof closeLinkModal !== 'undefined' ? closeLinkModal() : console.error('closeLinkModal not available')"
                  class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
            <span>Close</span>
            <span class="ml-2 text-xs text-gray-400">(ESC)</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Share Modal -->
  <div x-show="typeof showShareModal !== 'undefined' ? showShareModal : false" 
       x-transition:enter="transition ease-out duration-200"
       x-transition:enter-start="opacity-0"
       x-transition:enter-end="opacity-100"
       x-transition:leave="transition ease-in duration-150"
       x-transition:leave-start="opacity-100"
       x-transition:leave-end="opacity-0"
       class="fixed inset-0 z-50 overflow-y-auto"
       style="display: none;">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <!-- Backdrop -->
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @click="typeof showShareModal !== 'undefined' ? (showShareModal = false) : console.error('showShareModal not available')"></div>
      
      <!-- Modal -->
      <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
        <div class="sm:flex sm:items-start">
          <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-green-100 sm:mx-0 sm:h-10 sm:w-10">
            <i class="material-icons text-green-600">share</i>
          </div>
          <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left flex-1">
            <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Share Timeline</h3>
            
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Shareable URL</label>
                <div class="flex rounded-lg shadow-sm">
                  <input type="text" 
                         readonly
                         value="<%= timeline_url(@timeline) %>"
                         class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-l-lg border border-gray-300 focus:ring-green-500 focus:border-green-500 sm:text-sm bg-gray-50"
                         onclick="this.focus(); this.select();">
                  <button type="button" 
                          @click="navigator.clipboard.writeText('<%= timeline_url(@timeline) %>'); $event.target.textContent = 'Copied!'; setTimeout(() => $event.target.textContent = 'Copy', 2000)"
                          class="inline-flex items-center px-3 py-2 border border-l-0 border-gray-300 rounded-r-lg bg-gray-50 text-gray-500 text-sm hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    Copy
                  </button>
                </div>
              </div>
              
              <% if current_user && @timeline.user == current_user %>
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div class="flex">
                    <div class="flex-shrink-0">
                      <i class="material-icons text-blue-400">info</i>
                    </div>
                    <div class="ml-3">
                      <h3 class="text-sm font-medium text-blue-800">Sharing Settings</h3>
                      <p class="mt-1 text-sm text-blue-700">
                        To be shared, content must either be public <strong>or</strong> in a public Universe.
                        <%= link_to 'Learn more about privacy', 'https://medium.com/indent-labs/privacy-on-notebook-ai-how-it-works-c23a59faeae2', 
                            class: 'font-medium underline hover:text-blue-600', target: '_blank' %>
                      </p>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        </div>
        
        <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
          <button type="button" 
                  @click="typeof showShareModal !== 'undefined' ? (showShareModal = false) : console.error('showShareModal not available')"
                  class="w-full inline-flex justify-center rounded-lg border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:mt-0 sm:w-auto sm:text-sm">
            Close
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Hidden Template for New Events -->
  <div class="timeline-event-template" style="display: none;">
    <% event = TimelineEvent.new %>
    <div class="timeline-event-container group" 
         data-event-id="-1" 
         data-timeline-id="<%= @timeline.id %>"
         data-event-type="general"
         data-importance="minor"
         data-status="completed">
      <!-- Event Content -->
      <div class="flex items-start space-x-6">
        <!-- Timeline Dot and Controls -->
        <div class="flex flex-col items-center space-y-4 flex-shrink-0">
          <div class="w-4 h-4 timeline-dot-gray rounded-full"></div>
          
          <div class="timeline-move-controls opacity-0 group-hover:opacity-100 transition-opacity">
            <div class="flex flex-col space-y-1">
              <%= link_to '#', class: 'js-move-event-to-top' do %>
                <i class="material-icons text-sm">keyboard_double_arrow_up</i>
              <% end %>
              <%= link_to '#', class: 'js-move-event-up' do %>
                <i class="material-icons text-sm">keyboard_arrow_up</i>
              <% end %>
              <%= link_to '#', class: 'js-move-event-down' do %>
                <i class="material-icons text-sm">keyboard_arrow_down</i>
              <% end %>
              <%= link_to '#', class: 'js-move-event-to-bottom' do %>
                <i class="material-icons text-sm">keyboard_double_arrow_down</i>
              <% end %>
            </div>
          </div>
        </div>
        
        <!-- Event Card -->
        <div class="flex-1">
          <%= form_for event, html: { class: 'autosave-form' }, remote: true, method: :patch do |f| %>
            <%= f.hidden_field :timeline_id, value: @timeline.id %>
            
            <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md hover:border-gray-300 transition-all duration-200">
              
              <!-- Event Card Header -->
              <div class="px-4 py-3 border-b border-gray-100 bg-gray-50">
                <div class="flex items-center justify-between">
                  <!-- Event Title -->
                  <div class="flex-1">
                    <%= f.text_field :title, 
                        class: "event-title w-full text-lg font-semibold text-gray-900 bg-transparent border-0 hover:bg-white hover:border hover:border-gray-200 focus:bg-white focus:border-green-500 focus:ring-0 transition-colors px-2 py-1 rounded",
                        placeholder: "Event title..." %>
                  </div>
                  
                  <!-- Event Actions -->
                  <div class="flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity ml-4">
                    <button type="button" 
                            class="js-template-link-btn p-1.5 text-gray-400 hover:text-gray-600 rounded hover:bg-gray-50"
                            onclick="alert('Please save this event first before linking content.')">
                      <i class="material-icons text-sm">link</i>
                    </button>
                    <button type="button" 
                            class="js-delete-timeline-event p-1.5 text-gray-400 hover:text-red-600 rounded hover:bg-red-50"
                            onclick="deleteEvent(null, this)">
                      <i class="material-icons text-sm">delete</i>
                    </button>
                  </div>
                </div>
              </div>
              
              <!-- Event Body -->
              <div class="px-4 py-3">
                
                <!-- Time Header - Prominent -->
                <div class="flex items-center space-x-3 mb-3">
                  <i class="material-icons text-green-600">schedule</i>
                  <div class="flex items-center space-x-2 flex-1">
                    <%= f.text_field :time_label, 
                        class: "text-base font-medium text-green-600 bg-transparent border-0 border-b border-transparent hover:border-green-300 focus:border-green-500 focus:ring-0 placeholder-green-400 transition-colors",
                        placeholder: "Start time" %>
                    <i class="material-icons text-sm text-gray-400">arrow_forward</i>
                    <%= f.text_field :end_time_label, 
                        class: "text-base font-medium text-green-600 bg-transparent border-0 border-b border-transparent hover:border-green-300 focus:border-green-500 focus:ring-0 placeholder-green-400 transition-colors",
                        placeholder: "End time (optional)" %>
                  </div>
                </div>
                
                <!-- Event Type and Status Badges -->
                <div class="flex items-center space-x-2 mb-2">
                  <span class="event-type-badge inline-flex items-center px-2 py-0.5 rounded-md text-xs font-medium bg-gray-100 text-gray-800">
                    <i class="material-icons text-xs mr-1">event</i>
                    General Event
                  </span>
                </div>
                
                <!-- Event Title - More Compact -->
                <%= f.text_field :title, 
                    class: "event-title text-lg font-semibold text-gray-900 bg-transparent border-0 focus:ring-0 w-full placeholder-gray-400 mb-2",
                    placeholder: "Event title..." %>
                
                <!-- Description - Single Line by Default -->
                <div class="relative">
                  <%= f.text_area :description, 
                      rows: 1,
                      class: "w-full text-sm text-gray-700 bg-transparent border-0 focus:ring-0 resize-none placeholder-gray-400 transition-all",
                      placeholder: "What happened?",
                      style: "min-height: 1.5rem;" %>
                </div>
                
                <!-- Expandable Icons Bar -->
                <div class="flex items-center justify-between mt-3 pt-3 border-t border-gray-100">
                  <span class="status-badge-completed inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium">
                    Completed
                  </span>
                  
                  <div class="flex items-center space-x-2">
                    <!-- Settings Icon -->
                    <button type="button" 
                            class="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-50 transition-colors"
                            title="Event Settings"
                            disabled>
                      <i class="material-icons text-sm">settings</i>
                    </button>
                    
                    <!-- Notes Icon -->
                    <button type="button" 
                            class="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-50 transition-colors"
                            title="Notes"
                            disabled>
                      <i class="material-icons text-sm">note</i>
                    </button>
                    
                    <!-- Importance Icon -->
                    <button type="button" 
                            class="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-50 transition-colors"
                            title="Importance"
                            disabled>
                      <i class="material-icons text-sm">star</i>
                    </button>
                    
                    <!-- Status Icon -->
                    <button type="button" 
                            class="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-50 transition-colors"
                            title="Status"
                            disabled>
                      <i class="material-icons text-sm">check_circle</i>
                    </button>
                  </div>
                </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript for Timeline Editor -->
<script>
// Create a direct Alpine.js component using object literal syntax
function timelineEditor() {
  return {
    showMetaPanel: false,
    showLinkModal: false,
    showShareModal: false,
    showFilters: false,
    showMobileFilters: false,
    linkingEventId: null,
    draggedEvent: null,
    searchQuery: '',
    linkModalSearchQuery: '',
    selectedFilter: 'all',
    collapsedSections: {},
    selectedEvents: [],
    autoSaveStatus: 'saved',
    titleFocused: false,
    eventSections: {},
    eventTypeFilters: [],
    importanceFilters: [],
    statusFilters: [],
    timelineData: {
      name: '<%= j(@timeline.name) %>',
      subtitle: '<%= j(@timeline.subtitle) %>',
      description: '<%= j(@timeline.description) %>',
      notes: '<%= j(@timeline.notes) %>',
      private_notes: '<%= j(@timeline.private_notes) %>'
    },
    
    // Initialize method with debugging
    init() {
      console.log('Timeline editor Alpine.js component initialized');
      console.log('Available methods:', Object.getOwnPropertyNames(this).filter(name => typeof this[name] === 'function'));
      
      // Test critical functions
      console.log('Testing isEventSectionOpen function:', typeof this.isEventSectionOpen);
      console.log('Testing linkableContentMatches function:', typeof this.linkableContentMatches);
      console.log('Testing toggleEventSection function:', typeof this.toggleEventSection);
      
      // Make functions globally available for debugging
      window.timelineEditorDebug = this;
    },
    
    // Filter helper methods
    clearAllFilters() {
      console.log('clearAllFilters called');
      this.eventTypeFilters = [];
      this.importanceFilters = [];
      this.statusFilters = [];
    },
    
    getFilteredEventCount() {
      const events = document.querySelectorAll('.timeline-event-container:not(.timeline-event-template)');
      let count = 0;
      events.forEach(event => {
        if (this.shouldShowEvent(event)) count++;
      });
      return count;
    },
    
    shouldShowEvent(eventElement) {
      const eventData = this.getEventDataFromElement(eventElement);
      
      // Search filter
      if (this.searchQuery && !this.matchesSearch(eventData)) {
        return false;
      }
      
      // Type filter
      if (this.eventTypeFilters.length > 0 && !this.eventTypeFilters.includes(eventData.type)) {
        return false;
      }
      
      // Importance filter
      if (this.importanceFilters.length > 0 && !this.importanceFilters.includes(eventData.importance)) {
        return false;
      }
      
      // Status filter
      if (this.statusFilters.length > 0 && !this.statusFilters.includes(eventData.status)) {
        return false;
      }
      
      return true;
    },
    
    getEventDataFromElement(eventElement) {
      const title = eventElement.querySelector('input[name*="[title]"]')?.value || '';
      const description = eventElement.querySelector('textarea[name*="[description]"]')?.value || '';
      
      // Use data attributes instead of form elements for reliable filtering
      const type = eventElement.dataset.eventType || eventElement.getAttribute('data-event-type') || 'general';
      const importance = eventElement.dataset.importance || eventElement.getAttribute('data-importance') || 'minor'; 
      const status = eventElement.dataset.status || eventElement.getAttribute('data-status') || 'completed';
      
      return {
        title: title.toLowerCase(),
        description: description.toLowerCase(),
        type: type || 'general',
        importance: importance || 'minor',
        status: status || 'completed'
      };
    },
    
    matchesSearch(eventData) {
      const query = this.searchQuery.toLowerCase();
      return eventData.title.includes(query) || eventData.description.includes(query);
    },
    
    // Link modal methods
    openLinkModal(eventId) {
      console.log('openLinkModal called with eventId:', eventId);
      this.linkingEventId = eventId;
      this.showLinkModal = true;
      this.linkModalSearchQuery = '';
      this.selectedFilter = 'all';
      this.showMobileFilters = false;
      // Focus the search input after modal opens
      setTimeout(() => {
        const searchInput = document.querySelector('.link-modal-search');
        if (searchInput) searchInput.focus();
      }, 100);
    },
    
    closeLinkModal() {
      console.log('closeLinkModal called');
      this.showLinkModal = false;
      this.linkingEventId = null;
      this.linkModalSearchQuery = '';
      this.selectedFilter = 'all';
      this.showMobileFilters = false;
      this.collapsedSections = {};
    },
    
    toggleSection(sectionKey) {
      console.log('toggleSection called with key:', sectionKey);
      this.collapsedSections[sectionKey] = !this.collapsedSections[sectionKey];
    },
    
    isSectionCollapsed(sectionKey) {
      const result = this.collapsedSections[sectionKey] || false;
      console.log('isSectionCollapsed called with key:', sectionKey, 'result:', result);
      return result;
    },
    
    linkableContentMatches(contentName, contentType) {
      console.log('linkableContentMatches called with:', contentName, contentType);
      
      // First check filter selection
      if (this.selectedFilter && this.selectedFilter !== 'all') {
        // Special case for timeline filter
        if (this.selectedFilter === 'timeline') {
          if (contentName !== 'timeline' && contentType !== 'timeline') {
            return false;
          }
        } else {
          // Regular content type filter
          if (this.selectedFilter !== contentType.toLowerCase()) {
            return false;
          }
        }
      }
      
      // Then apply search query if present
      if (this.linkModalSearchQuery) {
        const query = this.linkModalSearchQuery.toLowerCase();
        return contentName.toLowerCase().includes(query);
      }
      
      // If no search query and filter matches (or is 'all'), show the content
      return true;
    },
    
    linkFirstResult() {
      const visibleButtons = document.querySelectorAll('.js-link-entity-selection');
      let firstVisibleButton = null;
      
      for (let button of visibleButtons) {
        if (button.offsetParent !== null && !button.style.display.includes('none')) {
          firstVisibleButton = button;
          break;
        }
      }
      
      if (firstVisibleButton) {
        firstVisibleButton.click();
      }
    },
    
    // Event section management
    toggleEventSection(eventId, section) {
      const key = `${eventId}_${section}`;
      console.log('toggleEventSection called:', eventId, section, 'key:', key);
      this.eventSections[key] = !this.eventSections[key];
    },
    
    isEventSectionOpen(eventId, section) {
      const key = `${eventId}_${section}`;
      const result = this.eventSections[key] || false;
      console.log('isEventSectionOpen called:', eventId, section, 'key:', key, 'result:', result);
      return result;
    }
  };
}

console.log('Timeline editor function defined');

// Helper function to submit forms remotely
function submitFormRemotely(form) {
  if (form.getAttribute('data-remote') !== 'true') {
    form.setAttribute('data-remote', 'true');
  }
  
  // Use Rails UJS to submit the form remotely
  if (typeof Rails !== 'undefined' && Rails.fire) {
    Rails.fire(form, 'submit');
  } else {
    // Fallback: dispatch submit event that Rails UJS should catch
    const event = document.createEvent('HTMLEvents');
    event.initEvent('submit', true, true);
    form.dispatchEvent(event);
  }
}
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Auto-save functionality
  document.addEventListener('ajax:success', function(event) {
    if (event.target.matches('.timeline-meta-form, .autosave-form')) {
      // Update autoSaveStatus through Alpine data
      const alpineEl = document.querySelector('[x-data]');
      if (alpineEl) {
        Alpine.$data(alpineEl).autoSaveStatus = 'saved';
        setTimeout(() => {
          Alpine.$data(alpineEl).autoSaveStatus = 'saved';
        }, 2000);
      }
    }
  });

  document.addEventListener('ajax:error', function(event) {
    if (event.target.matches('.timeline-meta-form, .autosave-form')) {
      const alpineEl = document.querySelector('[x-data]');
      if (alpineEl) {
        Alpine.$data(alpineEl).autoSaveStatus = 'error';
      }
    }
  });

  // Create timeline event
  document.getElementById('js-create-timeline-event').addEventListener('click', function() {
    const timelineId = document.querySelector('.timeline-events-container').dataset.timelineId;
    createTimelineEvent(timelineId);
  });

  // Create first timeline event
  const firstEventBtn = document.getElementById('js-create-first-event');
  if (firstEventBtn) {
    firstEventBtn.addEventListener('click', function() {
      const timelineId = document.querySelector('.timeline-events-container').dataset.timelineId;
      createTimelineEvent(timelineId);
    });
  }

  function createTimelineEvent(timelineId) {
    console.log('Creating timeline event for timeline:', timelineId);
    
    // Show loading state
    const createBtn = document.getElementById('js-create-timeline-event');
    const originalText = createBtn.innerHTML;
    createBtn.disabled = true;
    createBtn.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>Creating...';
    
    const alpineEl = document.querySelector('[x-data]');
    if (alpineEl) Alpine.$data(alpineEl).autoSaveStatus = 'saving';

    fetch('/plan/timeline_events', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name=csrf-token]').getAttribute('content')
      },
      body: JSON.stringify({
        timeline_event: {
          title: "Untitled Event",
          timeline_id: timelineId,
          event_type: "general",
          importance_level: "minor",
          status: "completed"
        }
      })
    })
    .then(response => response.json())
    .then(data => {
      console.log('Server response:', data);
      if (data.status === 'success') {
        console.log('Event created successfully with ID:', data.id);
        addEventToTimeline(data.id, timelineId);
        const alpineEl = document.querySelector('[x-data]');
        if (alpineEl) Alpine.$data(alpineEl).autoSaveStatus = 'saved';
      } else {
        console.error('Event creation failed:', data);
        throw new Error('Failed to create event');
      }
    })
    .catch(error => {
      console.error('Error creating timeline event:', error);
      const alpineEl = document.querySelector('[x-data]');
      if (alpineEl) Alpine.$data(alpineEl).autoSaveStatus = 'error';
      showErrorMessage('Failed to create timeline event. Please try again.');
    })
    .finally(() => {
      // Reset button state
      createBtn.disabled = false;
      createBtn.innerHTML = originalText;
    });
  }

  function addEventToTimeline(eventId, timelineId) {
    const template = document.querySelector('.timeline-event-template .timeline-event-container');
    const eventsContainer = document.querySelector('.timeline-events-container');
    
    console.log('Adding event to container:', eventsContainer);
    console.log('Container children before:', eventsContainer.children.length);
    
    const emptyState = eventsContainer.querySelector('.text-center.py-12');
    
    // Hide empty state if it exists
    if (emptyState) {
      emptyState.style.display = 'none';
    }
    
    // Clone the template
    const newEvent = template.cloneNode(true);
    
    // Update the event with the new ID and required data attributes
    newEvent.setAttribute('data-event-id', eventId);
    newEvent.setAttribute('data-timeline-id', timelineId);
    newEvent.setAttribute('data-event-type', 'general');
    newEvent.setAttribute('data-importance', 'minor');
    newEvent.setAttribute('data-status', 'completed');
    
    // Update form action URL
    const form = newEvent.querySelector('.autosave-form');
    if (form) {
      form.setAttribute('action', `/plan/timeline_events/${eventId}`);
    }
    
    // Update delete link
    const deleteLink = newEvent.querySelector('.js-delete-timeline-event');
    if (deleteLink) {
      deleteLink.setAttribute('href', `/plan/timeline_events/${eventId}`);
    }
    
    // Update link button - replace template link button with functional one
    const linkButton = newEvent.querySelector('.js-template-link-btn');
    if (linkButton) {
      linkButton.classList.remove('js-template-link-btn');
      linkButton.setAttribute('onclick', '');
      linkButton.addEventListener('click', function() {
        const alpineEl = document.querySelector('[x-data]');
        if (alpineEl) Alpine.$data(alpineEl).openLinkModal(eventId);
      });
    }
    
    // Update unique IDs for form fields
    const timeLabel = newEvent.querySelector('input[name="timeline_event[time_label]"]');
    const title = newEvent.querySelector('input[name="timeline_event[title]"]');
    const description = newEvent.querySelector('textarea[name="timeline_event[description]"]');
    const notes = newEvent.querySelector('textarea[name="timeline_event[notes]"]');
    
    if (timeLabel) timeLabel.id = `timeline_event_time_label_${eventId}`;
    if (title) title.id = `timeline_event_title_${eventId}`;
    if (description) description.id = `timeline_event_description_${eventId}`;
    if (notes) notes.id = `timeline_event_notes_${eventId}`;
    
    // Add the new event with animation
    newEvent.style.opacity = '0';
    newEvent.style.transform = 'translateY(-20px)';
    eventsContainer.appendChild(newEvent);
    
    console.log('Container children after:', eventsContainer.children.length);
    console.log('New event parent:', newEvent.parentElement);
    
    // Trigger animation
    setTimeout(() => {
      newEvent.style.transition = 'all 0.3s ease-out';
      newEvent.style.opacity = '1';
      newEvent.style.transform = 'translateY(0)';
    }, 10);
    
    // Update event count in header
    updateEventCount(eventsContainer.children.length);
    
    // Focus on the title field for immediate editing
    setTimeout(() => {
      const titleField = newEvent.querySelector('input[name="timeline_event[title]"]');
      if (titleField) {
        titleField.focus();
        titleField.select();
      }
    }, 350);
    
    // Scroll the new event into view
    setTimeout(() => {
      newEvent.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }, 100);
  }

  function updateEventCount(count) {
    const eventCountElement = document.querySelector('.hidden.sm\\:flex .text-sm.text-gray-600');
    if (eventCountElement) {
      const text = count === 1 ? '1 event' : `${count} events`;
      eventCountElement.firstChild.textContent = text;
    }
  }

  function showErrorMessage(message) {
    // Create and show a toast notification
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform';
    toast.innerHTML = `
      <div class="flex items-center">
        <i class="material-icons mr-2">error</i>
        <span>${message}</span>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 hover:text-red-200">
          <i class="material-icons">close</i>
        </button>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.style.transform = 'translateX(0)';
    }, 10);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      if (toast.parentElement) {
        toast.style.transform = 'translateX(full)';
        setTimeout(() => toast.remove(), 300);
      }
    }, 5000);
  }

  // Link entity functionality
  document.addEventListener('click', function(event) {
    if (event.target.matches('.js-link-entity-selection') || event.target.closest('.js-link-entity-selection')) {
      const button = event.target.matches('.js-link-entity-selection') ? event.target : event.target.closest('.js-link-entity-selection');
      const entityType = button.dataset.type;
      const entityId = button.dataset.id;
      const alpineEl = document.querySelector('[x-data*="timelineEditor"]');
      const eventId = alpineEl && alpineEl._x_dataStack ? alpineEl._x_dataStack[0].linkingEventId : null;
      
      if (eventId) {
        // Show loading state on the clicked button
        const originalContent = button.innerHTML;
        button.innerHTML = '<div class="flex items-center"><div class="animate-spin rounded-full h-4 w-4 border-b-2 border-green-500 mr-2"></div>Linking...</div>';
        button.disabled = true;
        
        fetch(`/plan/timeline_events/${eventId}/link`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name=csrf-token]').getAttribute('content')
          },
          body: JSON.stringify({
            entity_type: entityType,
            entity_id: entityId
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.status === 'success') {
            // Replace the linked content section with server-rendered HTML
            replaceLinkedContentSection(eventId, data.html);
            
            // Show success feedback on the button itself
            const originalContent = button.innerHTML;
            button.innerHTML = '<div class="flex items-center justify-between text-green-600"><div class="flex items-center"><i class="material-icons text-sm mr-2">check_circle</i><span>Added!</span></div></div>';
            button.classList.add('bg-green-50', 'border-green-300', 'text-green-800');
            
            // Reset button after 2 seconds but show linked state with name
            setTimeout(() => {
              const entityName = button.dataset.name || 'Content';
              button.innerHTML = `<div class="flex items-center justify-between text-gray-500"><div class="flex items-center min-w-0"><i class="material-icons text-sm mr-2">check_circle</i><span class="truncate">${entityName}</span></div><span class="text-xs ml-2 flex-shrink-0">Linked</span></div>`;
              button.classList.remove('bg-green-50', 'border-green-300', 'text-green-800');
              button.classList.add('bg-gray-50', 'border-gray-300', 'text-gray-500', 'cursor-not-allowed');
              button.disabled = true;
            }, 2000);
          } else {
            throw new Error(data.message || 'Failed to link content');
          }
        })
        .catch(error => {
          console.error('Error linking entity:', error);
          showErrorMessage('Error linking content. Please try again.');
        })
        .finally(() => {
          // Reset button state
          button.innerHTML = originalContent;
          button.disabled = false;
        });
      }
    }
  });


  function replaceLinkedContentSection(eventId, html) {
    const eventContainer = document.querySelector(`[data-event-id="${eventId}"]`);
    if (!eventContainer) return;
    
    // Find the current linked content section or the location where it should be inserted
    const existingSection = eventContainer.querySelector(`#linked-content-${eventId}`);
    const cardBody = eventContainer.querySelector('.px-6.py-4.space-y-4');
    
    if (existingSection) {
      // Replace existing section
      existingSection.outerHTML = html;
    } else if (cardBody && html.trim()) {
      // Insert new section at the end of the card body
      cardBody.insertAdjacentHTML('beforeend', html);
    }
    
    // Add entrance animation to the new section
    const newSection = eventContainer.querySelector(`#linked-content-${eventId}`);
    if (newSection) {
      newSection.style.opacity = '0';
      newSection.style.transform = 'translateY(-10px)';
      setTimeout(() => {
        newSection.style.transition = 'all 0.3s ease-out';
        newSection.style.opacity = '1';
        newSection.style.transform = 'translateY(0)';
      }, 10);
    }
  }

  // Update unlink functionality to use Rails UJS instead of manual fetch
  // The unlink buttons now have remote: true, so they'll be handled by Rails UJS
  document.addEventListener('ajax:success', function(event) {
    if (event.target.matches('a[href*="/unlink/"]')) {
      const response = event.detail[0];
      if (response.status === 'success') {
        // Extract event ID from the URL
        const eventId = event.target.href.match(/\/timeline_events\/(\d+)\/unlink/)[1];
        replaceLinkedContentSection(eventId, response.html);
        showSuccessMessage(response.message || 'Content unlinked successfully!');
      }
    }
  });

  function showSuccessMessage(message) {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform';
    toast.innerHTML = `
      <div class="flex items-center">
        <i class="material-icons mr-2">check_circle</i>
        <span>${message}</span>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 hover:text-green-200">
          <i class="material-icons">close</i>
        </button>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.style.transform = 'translateX(0)';
    }, 10);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
      if (toast.parentElement) {
        toast.style.transform = 'translateX(full)';
        setTimeout(() => toast.remove(), 300);
      }
    }, 3000);
  }

  // Move event handlers
  document.addEventListener('click', function(event) {
    const eventContainer = event.target.closest('.timeline-event-container');
    const eventId = eventContainer?.dataset.eventId;
    
    if (!eventId || eventId === '-1') return;
    
    let endpoint = null;
    if (event.target.closest('.js-move-event-to-top')) {
      endpoint = `/plan/timeline_events/${eventId}/move/top`;
    } else if (event.target.closest('.js-move-event-up')) {
      endpoint = `/plan/timeline_events/${eventId}/move/up`;
    } else if (event.target.closest('.js-move-event-down')) {
      endpoint = `/plan/timeline_events/${eventId}/move/down`;
    } else if (event.target.closest('.js-move-event-to-bottom')) {
      endpoint = `/plan/timeline_events/${eventId}/move/bottom`;
    }
    
    if (endpoint) {
      event.preventDefault();
      fetch(endpoint, { 
        method: 'GET',
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name=csrf-token]').getAttribute('content')
        }
      })
      .then(() => {
        moveEventInDOM(eventContainer, endpoint);
        showSuccessMessage('Event moved successfully!');
      })
      .catch(error => {
        console.error('Error moving event:', error);
        showErrorMessage('Error moving event. Please try again.');
      });
    }
  });

  function moveEventInDOM(eventContainer, endpoint) {
    const eventsContainer = eventContainer.parentElement;
    const allEvents = Array.from(eventsContainer.children).filter(el => 
      el.classList.contains('timeline-event-container') && 
      !el.classList.contains('timeline-event-template')
    );
    
    const currentIndex = allEvents.indexOf(eventContainer);
    let newIndex;
    
    // Determine new position based on action
    if (endpoint.includes('/top')) {
      newIndex = 0;
    } else if (endpoint.includes('/bottom')) {
      newIndex = allEvents.length - 1;
    } else if (endpoint.includes('/up')) {
      newIndex = Math.max(0, currentIndex - 1);
    } else if (endpoint.includes('/down')) {
      newIndex = Math.min(allEvents.length - 1, currentIndex + 1);
    }
    
    // Only move if position actually changes
    if (newIndex !== currentIndex) {
      // Add animation class
      eventContainer.style.transition = 'all 0.3s ease-out';
      eventContainer.style.transform = 'scale(1.02)';
      eventContainer.style.boxShadow = '0 10px 25px rgba(0,0,0,0.1)';
      
      setTimeout(() => {
        // Move in DOM
        if (newIndex === 0) {
          eventsContainer.insertBefore(eventContainer, allEvents[0]);
        } else if (newIndex === allEvents.length - 1) {
          eventsContainer.appendChild(eventContainer);
        } else {
          const referenceEvent = allEvents[newIndex];
          if (currentIndex < newIndex) {
            eventsContainer.insertBefore(eventContainer, referenceEvent.nextSibling);
          } else {
            eventsContainer.insertBefore(eventContainer, referenceEvent);
          }
        }
        
        // Reset animation
        setTimeout(() => {
          eventContainer.style.transform = 'scale(1)';
          eventContainer.style.boxShadow = '';
          
          setTimeout(() => {
            eventContainer.style.transition = '';
          }, 300);
        }, 50);
        
        // Scroll into view
        eventContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, 150);
    }
  }

  // Make deleteEvent globally available
  window.deleteEvent = function(eventId, button) {
    const eventContainer = button.closest('.timeline-event-container');
    
    // If this is a template event (not yet saved), just remove it
    if (!eventId || eventId === 'null') {
      eventContainer.remove();
      return;
    }
    
    // Show confirmation modal
    if (!confirm('Are you sure you want to delete this event? This cannot be undone.')) {
      return;
    }
    
    // Show loading state
    const originalIcon = button.innerHTML;
    button.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-red-500"></div>';
    button.disabled = true;
    
    fetch(`/plan/timeline_events/${eventId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name=csrf-token]').getAttribute('content')
      }
    })
    .then(() => {
      // Animate removal
      eventContainer.style.transition = 'all 0.3s ease-in';
      eventContainer.style.opacity = '0';
      eventContainer.style.transform = 'translateX(-20px)';
      
      setTimeout(() => {
        eventContainer.remove();
        
        // Update event count
        const eventsContainer = document.querySelector('.timeline-events-container');
        const eventCount = eventsContainer.querySelectorAll('.timeline-event-container:not(.timeline-event-template)').length;
        updateEventCount(eventCount);
        
        // Show empty state if no events remain
        if (eventCount === 0) {
          showEmptyState();
        }
        
        showSuccessMessage('Event deleted successfully!');
      }, 300);
    })
    .catch(error => {
      console.error('Error deleting event:', error);
      button.innerHTML = originalIcon;
      button.disabled = false;
      showErrorMessage('Error deleting event. Please try again.');
    });
  };

  function showEmptyState() {
    const eventsContainer = document.querySelector('.timeline-events-container');
    const emptyState = document.createElement('div');
    emptyState.className = 'text-center py-12';
    emptyState.innerHTML = `
      <div class="mx-auto h-24 w-24 rounded-full bg-gradient-to-br from-green-100 to-green-200 flex items-center justify-center mb-6 shadow-sm">
        <i class="material-icons text-4xl text-green-600">timeline</i>
      </div>
      <h3 class="text-xl font-semibold text-gray-900 mb-3">Your timeline is empty</h3>
      <p class="text-gray-600 mb-8 max-w-md mx-auto">
        Start building your timeline by adding your first event. Track important moments, plot points, and key developments in chronological order.
      </p>
      <button id="js-create-first-event"
              class="inline-flex items-center px-6 py-3 text-base font-medium rounded-lg text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 shadow-sm">
        <i class="material-icons text-lg mr-2">add</i>
        Add Your First Event
      </button>
    `;
    
    // Add event listener to the new button
    const newFirstEventBtn = emptyState.querySelector('#js-create-first-event');
    newFirstEventBtn.addEventListener('click', function() {
      const timelineId = document.querySelector('.timeline-events-container').dataset.timelineId;
      createTimelineEvent(timelineId);
      emptyState.remove(); // Remove empty state when creating
    });
    
    eventsContainer.appendChild(emptyState);
  }
});

// Alpine.js initialization complete
</script>

