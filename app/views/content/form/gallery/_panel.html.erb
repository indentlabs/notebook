<% 
  raw_model = content.is_a?(ContentSerializer) ? content.raw_model : content
  
  # Get both image types with ordering
  regular_images = raw_model.image_uploads.ordered.to_a
  basil_images = (@basil_images || []).sort_by(&:position)
  
  # Keep track of regular and AI images separately for display
  images = regular_images
  
  # Calculate total images for display purposes
  total_images = regular_images.count + basil_images.count
  
  # Find the pinned image (if any) - there should only be one pinned image
  pinned_image = regular_images.find(&:pinned?) || basil_images.find(&:pinned?)

  # Create a combined list of all images for sortable functionality
  # We'll maintain type information for each
  combined_images = []
  regular_images.each do |image|
    combined_images << {
      id: image.id,
      type: 'image_upload',
      data: image,
      pinned: image.pinned?
    }
  end
  
  basil_images.each do |commission|
    combined_images << {
      id: commission.id,
      type: 'basil_commission',
      data: commission,
      pinned: commission.pinned?
    }
  end
  
  # If there's a pinned image, move it to the front
  if pinned_image
    combined_images.sort_by! { |img| img[:pinned] ? 0 : 1 }
  end
%>

<div class="row">
  <div class="col s12">
    <% if images.any? || basil_images.any? %>
      <!-- Gallery preview section -->
      <div class="gallery-preview-section">
        <h5 class="gallery-section-title">
          <i class="material-icons left">photo_library</i>
          Current Images (<%= total_images %>)
          <span class="right grey-text text-lighten-1 reordering-instructions" style="font-size: 1rem; display: none;">
            <i class="material-icons left">touch_app</i> Drag images to reorder
          </span>
        </h5>
        
        <div class="gallery-grid sortable-gallery" data-content-type="<%= raw_model.class.name %>" data-content-id="<%= raw_model.id %>">
          <div class="row js-sortable-gallery-items">
            <!-- Show images in their sorted order -->
            <% combined_images.each do |image_item| %>
              <% 
                is_pinned = image_item[:pinned]
                image_data = image_item[:data]
                image_type = image_item[:type]
                image_id = image_item[:id]
              %>
              <div class="col s12 m6 l6 gallery-sortable-item" data-image-id="<%= image_id %>" data-image-type="<%= image_type %>">
                <div class="image-card <%= is_pinned ? 'image-pinned' : '' %>">
                  <% if image_type == 'image_upload' %>
                    <div class="image-preview">
                      <%= link_to image_data.src(:original), target: '_blank' do %>
                        <%= image_tag image_data.src(:medium), class: "responsive-img" %>
                      <% end %>
                    </div>
                    <div class="image-actions">
                      <div class="image-meta">
                        <span class="file-size"><%= Filesize.from("#{image_data.src_file_size}B").to_f('KB').round(2) %> KB</span>
                      </div>
                    </div>
                    
                    <!-- Pin button with tooltip (positioned absolutely) -->
                    <%= link_to toggle_image_pin_path(image_type: 'image_upload', image_id: image_data.id),
                      class: "pin-button-overlay js-toggle-pin #{is_pinned ? 'amber-text' : 'grey-text'} tooltipped",
                      remote: true,
                      method: :post,
                      data: { 
                        type: 'json',
                        position: 'top',
                        tooltip: 'Pin this image to always use it in previews of this page'
                      } do %>
                      <i class="material-icons">push_pin</i>
                    <% end %>
                    
                    <!-- Delete button with tooltip (positioned absolutely) -->
                    <%= link_to image_deletion_path(image_data.id),
                      class: 'delete-button-overlay js-remove-image red-text tooltipped',
                      method: 'delete',
                      remote: true,
                      data: { 
                        confirm: "Are you sure? This can't be undone.",
                        position: 'top',
                        tooltip: 'Delete this image' 
                      } do %>
                      <i class="material-icons">delete</i>
                    <% end %>
                    
                    <% if is_pinned %>
                      <div class="image-pinned-badge-overlay">
                        <i class="material-icons amber-text">push_pin</i> Pinned
                      </div>
                    <% end %>
                    
                    <div class="sortable-handle-overlay tooltipped" data-tooltip="Drag to reorder">
                      <i class="material-icons">drag_handle</i>
                    </div>
                  <% else %>
                    <div class="image-preview basil-image">
                      <% if image_data.image.attached? %>
                        <%= link_to rails_blob_path(image_data.image, disposition: "attachment"), target: '_blank' do %>
                          <%= image_tag rails_blob_path(image_data.image, disposition: "attachment"), class: "responsive-img" %>
                        <% end %>
                      <% end %>
                    </div>
                    <div class="image-actions">
                      <div class="image-meta">
                        <span class="basil-label">Generated with Basil</span>
                      </div>
                    </div>
                    
                    <!-- Pin button with tooltip (positioned absolutely) -->
                    <%= link_to toggle_image_pin_path(image_type: 'basil_commission', image_id: image_data.id),
                      class: "pin-button-overlay js-toggle-pin #{is_pinned ? 'amber-text' : 'grey-text'} tooltipped",
                      remote: true,
                      method: :post,
                      data: { 
                        type: 'json',
                        position: 'top', 
                        tooltip: 'Pin this image to always use it in previews of this page'
                      } do %>
                      <i class="material-icons">push_pin</i>
                    <% end %>
                    
                    <!-- Delete button with tooltip (positioned absolutely) -->
                    <%= link_to basil_delete_path(image_data),
                      class: 'delete-button-overlay js-remove-image red-text tooltipped',
                      method: 'delete',
                      remote: true,
                      data: { 
                        confirm: "Are you sure? This can't be undone.",
                        position: 'top',
                        tooltip: 'Delete this image'
                      } do %>
                      <i class="material-icons">delete</i>
                    <% end %>
                    
                    <% if is_pinned %>
                      <div class="image-pinned-badge-overlay">
                        <i class="material-icons amber-text">push_pin</i> Pinned
                      </div>
                    <% end %>
                    
                    <div class="sortable-handle-overlay tooltipped" data-tooltip="Drag to reorder">
                      <i class="material-icons">drag_handle</i>
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    <% end %>
    
    <!-- Mobile reordering controls -->
    <div class="mobile-reordering-controls hide-on-med-and-up">
      <div class="card amber lighten-5">
        <div class="card-content">
          <span class="card-title">
            <i class="material-icons left">touch_app</i>
            Reorder Images
          </span>
          <p>On mobile devices, you can use these controls to change the order of your images:</p>
          
          <div class="mobile-reordering-instructions">
            <p><strong>1.</strong> Select an image to move:</p>
            <select id="mobileImageSelector" class="browser-default">
              <% combined_images.each_with_index do |image_item, index| %>
                <% 
                  image_data = image_item[:data]
                  image_type = image_item[:type]
                  image_id = image_item[:id]
                  name = image_type == 'image_upload' ? "Image #{index + 1}" : "Basil Image #{index + 1}"
                  name += " (Pinned)" if image_item[:pinned]
                %>
                <option value="<%= image_id %>" data-type="<%= image_type %>" data-index="<%= index %>"><%= name %></option>
              <% end %>
            </select>
            
            <p><strong>2.</strong> Choose where to move it:</p>
            <div class="mobile-move-buttons">
              <button class="btn-small amber" id="moveImageFirst">
                <i class="material-icons left">first_page</i>
                First
              </button>
              <button class="btn-small amber" id="moveImageUp">
                <i class="material-icons left">arrow_upward</i>
                Up
              </button>
              <button class="btn-small amber" id="moveImageDown">
                <i class="material-icons left">arrow_downward</i>
                Down
              </button>
              <button class="btn-small amber" id="moveImageLast">
                <i class="material-icons left">last_page</i>
                Last
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Upload section -->
    <div class="upload-section">
      <h5 class="gallery-section-title">
        <i class="material-icons left">file_upload</i>
        Upload Images
        <small class="grey-text">
          <% if current_user.upload_bandwidth_kb > 0 %>
            You have <%= Filesize.from("#{current_user.upload_bandwidth_kb}KB").pretty %> of bandwidth remaining.
          <% else %>
            You have no upload bandwidth remaining. Upgrade to Premium or delete some existing images for more.
          <% end %>
        </small>
      </h5>
      
      <div class="upload-form-container">
        <%= render partial: 'content/form/images/upload', locals: { f: f, content: content } %>
        
        <div class="add-more-container">
          <%= link_to_add_association "<i class='material-icons left'>add_photo_alternate</i>Add another image".html_safe, f,
            :image_uploads,
            class: 'btn-flat waves-effect',
            partial: 'content/form/images/upload',
            render_options: { locals: { f: f, content: content }}
          %>
        </div>
        
        <div class="upload-button-container center">
          <%= f.button :submit, class: 'btn btn-large waves-effect waves-light upload-button', data: { disable_with: '<i class="material-icons left">cloud_upload</i> Uploading...' } do %>
              <span>Perform uploads</span>
            <% end %>
          <p class="upload-note grey-text">
            Once you've selected your images, press the button above to upload them.
            This will reload the page.
          </p>
        </div>
      </div>
    </div>
    
    <!-- CTA for full gallery -->
    <div class="gallery-cta-container">
      <div class="card <%= raw_model.class.color %> lighten-5">
        <div class="card-content center">
          <i class="material-icons medium <%= raw_model.class.text_color %> text-darken-2">photo_library</i>
          <h5>View the full gallery</h5>
          <p>See all images for this <%= raw_model.class.name.downcase %> in a beautiful full-screen gallery.</p>
          <%= link_to send("gallery_#{raw_model.class.name.downcase}_path", raw_model), class: "btn waves-effect waves-light #{raw_model.class.color}" do %>
            <i class="material-icons left">fullscreen</i>
            Open Gallery
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .sortable-handle-overlay {
    position: absolute;
    top: 10px;
    left: 10px;
    width: 36px;
    height: 36px;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: all 0.2s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    cursor: grab;
    opacity: 0.5;
  }

  .sortable-handle-overlay:hover {
    opacity: 1;
    background-color: rgba(255, 255, 255, 1);
  }

  .image-card:hover .sortable-handle-overlay {
    opacity: 0.9;
  }

  .ui-sortable-helper {
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  }

  .gallery-sortable-item.ui-sortable-placeholder {
    visibility: visible !important;
    background-color: rgba(255, 193, 7, 0.2);
    border: 2px dashed rgba(255, 193, 7, 0.5);
    border-radius: 8px;
    margin: 10px;
    height: 320px;
  }

  /* Hide sort handles on mobile - they'll use alternative controls */
  @media only screen and (max-width: 600px) {
    .sortable-handle-overlay {
      display: none;
    }
  }
  
  .gallery-section-title {
    font-size: 1.5rem;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
  }
  
  .gallery-grid {
    margin-bottom: 40px;
  }
  
  .image-card {
    background: white;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    margin-bottom: 20px;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    position: relative;
  }
  
  .image-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.15);
  }
  
  .image-preview {
    height: 300px;
    overflow: hidden;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f5f5f5;
  }
  
  .image-preview img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .image-actions {
    padding: 10px 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top: 1px solid #f0f0f0;
  }
  
  .image-meta {
    color: #9e9e9e;
    font-size: 0.85rem;
  }
  
  .basil-label {
    display: inline-block;
    font-size: 0.8rem;
    color: #9c27b0;
  }
  
  .image-buttons {
    display: flex;
  }
  
  /* Positioned action buttons */
  .pin-button-overlay {
    position: absolute;
    bottom: 45px;
    right: 10px;
    width: 36px;
    height: 36px;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: all 0.2s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  .delete-button-overlay {
    position: absolute;
    bottom: 45px;
    left: 10px;
    width: 36px;
    height: 36px;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: all 0.2s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  .pin-button-overlay.processing {
    opacity: 0.5;
    pointer-events: none;
  }

  .pin-button-overlay:hover,
  .delete-button-overlay:hover {
    background-color: rgba(255, 255, 255, 1);
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
  }
  
  .image-pinned-badge-overlay {
    position: absolute;
    bottom: 90px;
    left: 10px;
    background-color: rgba(255, 152, 0, 0.8);
    color: white;
    padding: 3px 8px;
    border-radius: 10px;
    font-size: 0.8rem;
    display: flex;
    align-items: center;
    z-index: 2;
  }
  
  .image-pinned-badge-overlay i {
    font-size: 14px;
    margin-right: 4px;
  }
  
  .upload-section {
    margin-top: 30px;
    margin-bottom: 30px;
  }
  
  .upload-form-container {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 4px;
  }
  
  .add-more-container {
    margin: 15px 0;
  }
  
  .upload-button-container {
    margin-top: 25px;
  }
  
  .upload-note {
    margin-top: 10px;
    font-size: 0.9rem;
  }
  
  .gallery-cta-container {
    margin: 40px 0 20px;
  }
  
  /* Mobile reordering styles */
  .mobile-reordering-controls {
    margin-bottom: 30px;
  }
  
  .mobile-move-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 15px;
  }
  
  .mobile-move-buttons .btn-small {
    flex: 1;
    min-width: 80px;
    margin: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .pinned-section-divider,
  .basil-pinned-divider {
    background-color: #f9f9f9;
    padding: 8px 15px;
    border-radius: 4px;
    margin: 15px 0;
    font-weight: 500;
    font-size: 1.1rem;
    display: flex;
    align-items: center;
  }
  
  .pinned-section-divider i,
  .basil-pinned-divider i {
    margin-right: 8px;
  }
  
  .basil-pinned-divider {
    background-color: #f3e5f5;
  }
  
  .section-header h6 {
    font-size: 1.2rem;
    font-weight: 500;
    margin: 10px 0 20px 0;
    padding-bottom: 5px;
    border-bottom: 2px solid #ffab40;
    display: inline-block;
  }
  
  .section-header h6 i {
    vertical-align: middle;
    margin-right: 8px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize sortable functionality for gallery images
    var galleryItems = document.querySelector('.js-sortable-gallery-items');
    if (galleryItems) {
      var sortableGallery = $('.js-sortable-gallery-items');
      var sortableContainer = sortableGallery.closest('.sortable-gallery');
      var contentType = sortableContainer.data('content-type');
      var contentId = sortableContainer.data('content-id');

      // Initialize the jQuery UI sortable
      sortableGallery.sortable({
        items: '.gallery-sortable-item',
        handle: '.sortable-handle-overlay',
        placeholder: 'gallery-sortable-item ui-sortable-placeholder',
        cursor: 'move',
        opacity: 0.8,
        tolerance: 'pointer',
        start: function(e, ui) {
          // Show reordering instructions when drag starts
          $('.reordering-instructions').fadeIn();
        },
        stop: function(e, ui) {
          // Hide instructions when drag stops
          $('.reordering-instructions').fadeOut();
          
          // Save the new order via API
          var items = [];
          $('.gallery-sortable-item').each(function(index) {
            var imageId = $(this).data('image-id');
            var imageType = $(this).data('image-type');
            
            items.push({
              id: imageId,
              type: imageType,
              position: index + 1 // Position is 1-indexed
            });
          });
          
          // Save the new order via AJAX
          $.ajax({
            url: '/api/v1/gallery_images/sort',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
              images: items,
              content_type: contentType,
              content_id: contentId
            }),
            success: function(response) {
              // Show success indicator (optional)
              M.toast({html: 'Image order saved', classes: 'green'}); 
            },
            error: function(error) {
              console.error('Error saving image order:', error);
              M.toast({html: 'Failed to save image order', classes: 'red'});
              // Could refresh the page here to reset the order
            }
          });
        }
      });
    }
    
    // Initialize tooltips
    var tooltips = document.querySelectorAll('.tooltipped');
    M.Tooltip.init(tooltips);
    
    // Handle pin toggle buttons
    var pinButtons = document.querySelectorAll('.js-toggle-pin');
    
    pinButtons.forEach(function(button) {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Prevent double-clicks by disabling the button temporarily
        if (this.classList.contains('processing')) return;
        this.classList.add('processing');
        
        var url = this.getAttribute('href');
        var buttonElement = this;
        var imageCard = buttonElement.closest('.image-card');
        
        fetch(url, {
          method: 'POST',
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
          // Remove processing state
          buttonElement.classList.remove('processing');
          // Update the UI based on the pin state
          if (data.pinned) {
            buttonElement.classList.add('amber-text');
            buttonElement.classList.remove('grey-text');
            
            // Add pinned badge if not exists
            if (!imageCard.querySelector('.pinned-badge-overlay')) {
              var pinnedBadge = document.createElement('div');
              pinnedBadge.className = 'image-pinned-badge-overlay';
              pinnedBadge.innerHTML = '<i class="material-icons amber-text">push_pin</i> Pinned';
              imageCard.appendChild(pinnedBadge);
            }
            
            // Also remove pinned badge from all other images
            var allPinnedBadges = document.querySelectorAll('.image-pinned-badge-overlay');
            var allPinButtons = document.querySelectorAll('.js-toggle-pin');
            
            allPinnedBadges.forEach(function(badge) {
              if (badge.closest('.image-card') !== imageCard) {
                badge.remove();
              }
            });
            
            allPinButtons.forEach(function(btn) {
              if (btn !== buttonElement) {
                btn.classList.remove('amber-text');
                btn.classList.add('grey-text');
              }
            });
          } else {
            buttonElement.classList.remove('amber-text');
            buttonElement.classList.add('grey-text');
            
            // Remove pinned badge
            var pinnedBadge = imageCard.querySelector('.image-pinned-badge-overlay');
            if (pinnedBadge) {
              pinnedBadge.remove();
            }
          }
        })
        .catch(error => {
          console.error('Error toggling pin status:', error);
          // Remove processing state on error too
          buttonElement.classList.remove('processing');
          // Show error toast
          M.toast({html: 'Error toggling pin status', classes: 'red'});
        });
      });
    });
    
    // Mobile reordering logic
    var mobileImageSelector = document.getElementById('mobileImageSelector');
    var moveFirstBtn = document.getElementById('moveImageFirst');
    var moveUpBtn = document.getElementById('moveImageUp');
    var moveDownBtn = document.getElementById('moveImageDown');
    var moveLastBtn = document.getElementById('moveImageLast');
    
    if (mobileImageSelector && moveUpBtn && moveDownBtn) {
      var sortableContainer = document.querySelector('.sortable-gallery');
      var contentType = sortableContainer ? sortableContainer.getAttribute('data-content-type') : '';
      var contentId = sortableContainer ? sortableContainer.getAttribute('data-content-id') : '';
      
      // Helper function to reorder images
      function reorderImages(getNewPosition) {
        if (!mobileImageSelector.value) return;
        
        var selectedOption = mobileImageSelector.options[mobileImageSelector.selectedIndex];
        var imageId = mobileImageSelector.value;
        var imageType = selectedOption.getAttribute('data-type');
        var currentIndex = parseInt(selectedOption.getAttribute('data-index'));
        
        // Get all items
        var items = Array.from(document.querySelectorAll('.gallery-sortable-item'));
        var totalItems = items.length;
        
        // Calculate new position based on the operation
        var newPosition = getNewPosition(currentIndex, totalItems);
        
        // Update DOM order
        var itemToMove = items[currentIndex];
        var parent = itemToMove.parentNode;
        
        if (newPosition === 0) {
          // Move to first position
          parent.insertBefore(itemToMove, parent.firstChild);
        } else if (newPosition >= totalItems - 1) {
          // Move to last position
          parent.appendChild(itemToMove);
        } else {
          // Move to specific position
          parent.insertBefore(itemToMove, items[newPosition]);
        }
        
        // Update data-index attributes after reordering
        Array.from(document.querySelectorAll('.gallery-sortable-item')).forEach((item, idx) => {
          var option = Array.from(mobileImageSelector.options).find(opt => 
            opt.value === item.getAttribute('data-image-id') && 
            opt.getAttribute('data-type') === item.getAttribute('data-image-type')
          );
          if (option) option.setAttribute('data-index', idx);
        });
        
        // Prepare data for API update
        var updatedItems = [];
        Array.from(document.querySelectorAll('.gallery-sortable-item')).forEach((item, idx) => {
          updatedItems.push({
            id: item.getAttribute('data-image-id'),
            type: item.getAttribute('data-image-type'),
            position: idx + 1 // Position is 1-indexed
          });
        });
        
        // Save via API
        fetch('/api/v1/gallery_images/sort', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({
            images: updatedItems,
            content_type: contentType,
            content_id: contentId
          })
        })
        .then(response => response.json())
        .then(data => {
          // Success toast
          M.toast({html: 'Image order saved', classes: 'green'});
        })
        .catch(error => {
          console.error('Error saving image order:', error);
          M.toast({html: 'Failed to save image order', classes: 'red'});
        });
      }
      
      // Set up event listeners for mobile reordering buttons
      moveFirstBtn.addEventListener('click', function() {
        reorderImages(() => 0);
      });
      
      moveUpBtn.addEventListener('click', function() {
        reorderImages((currentIndex) => Math.max(0, currentIndex - 1));
      });
      
      moveDownBtn.addEventListener('click', function() {
        reorderImages((currentIndex, totalItems) => Math.min(totalItems - 1, currentIndex + 1));
      });
      
      moveLastBtn.addEventListener('click', function() {
        reorderImages((currentIndex, totalItems) => totalItems - 1);
      });
    }
    
    // Handle delete buttons
    var deleteButtons = document.querySelectorAll('.js-remove-image');
    
    deleteButtons.forEach(function(button) {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        
        if (confirm("Are you sure? This can't be undone.")) {
          var url = this.getAttribute('href');
          var imageCard = this.closest('.col');
          
          fetch(url, {
            method: 'DELETE',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
              'Accept': 'application/json'
            },
            credentials: 'same-origin'
          })
          .then(response => {
            if (response.ok) {
              // Remove the image from the DOM on successful delete
              imageCard.remove();
              
              // Update the count in the header
              var countEl = document.querySelector('.gallery-section-title');
              if (countEl) {
                var countText = countEl.textContent;
                var countMatch = countText.match(/\((\d+)\)/);
                if (countMatch && countMatch[1]) {
                  var currentCount = parseInt(countMatch[1]);
                  var newCount = Math.max(0, currentCount - 1);
                  countEl.textContent = countText.replace(/\(\d+\)/, '(' + newCount + ')');
                }
              }
            } else {
              console.error('Error deleting image');
            }
          })
          .catch(error => {
            console.error('Error deleting image:', error);
          });
        }
      });
    });
  });
</script>